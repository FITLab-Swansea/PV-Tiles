/*
PV-Tiles: Towards Closely-CoupledPhotovoltaic and Digital Materials for Useful,Beautiful and Sustainable Interactive Surfaces
Example for implementing PV-tile prototype-demonstrators: kitchen scenario demonstrator and tabletop scenario demonstrator

Author :  Yogesh Kumar Meena, PostDoc Research officer, Swansea University, UK
Date   :  Sept 17, 2019
Version:  1.00
File   :  IntrectiveKitchenWall.ino

Required:\\
This is based on Sharp® 128x128 Memory LCD Library
Download and install the Energia IDE. 
Get Sharp® 128x128 Memory LCD and microSD Card TI BoosterPack™  
Get MSP430FR5969 Ultra-Low-Power Microcontroller
\\..

You can use the codes to bootstrap for your next interactive research project.

IMPORTANT NOTICE: Our intention is to make it free for academic research purposes. 
If you are going to use it in your research, we suggest you to cite the below paper 
Meena, Y., Seunarine, K., Sahoo, D., Robinson, S., Pearson, J., Zhang, C., Carnie, M., Pockett, A., Prescott, A., Thomas, S., Lee, K., Jones, M. 2020 
PV-Tiles: Towards Closely-Coupled Photovoltaic and Digital Materials for Useful, Beautiful and Sustainable Interactive Surfaces, 
CHI Conference on Human Factors in Computing Systems (CHI '20)
https://doi.org/10.1145/3313831.3376368

Copyright 2020 Meena, Y., Seunarine, K., Sahoo, D., Robinson, S., Pearson, J., Zhang, C., Carnie, M., Pockett, A., Prescott, A., Thomas, S., Lee, K., Jones, M
 */

 
/* PV-Tile numbering on display 4 by 4 matrix
 *  0   4   8    12
 *  1   5   9    13
 *  2   6   10   14
 *  3   7   11   15
 */

// Include application, user and local libraries
#include "SPI.h"
#include "OneMsTaskTimer.h"
#include <LCD_SharpBoosterPack_SPI.h>

// Variables
LCD_SharpBoosterPack_SPI myScreen(6,5,2,false,SHARP_128);
uint8_t myOrientation = 0;
uint16_t myCount = 0;
#define LCD_VERTICAL_MAX myScreen.getSize();
#define LCD_HORIZONTAL_MAX myScreen.getSize();

// Analog I/Os on MSP430F5529 evaluation board
int sensorPin0 = P6_0;
int sensorPin1 = P6_1;

// Digital output from PIR module. P2_5 is an interrupt enabled GPIO
int PIR_pin = P2_5;
 
// Control analog switch
int Energy_Harvest = P1_2;

// 3 GPIOs to select MUX input
//See if any other spare GPIOs available to free analog I/Os
int AddressPin0 = P8_2;
int AddressPin1 = P3_7;
int AddressPin2 = P4_0;

int AddressCounter = 0;

volatile boolean INTERRUPT_FLAG = LOW;
volatile int Gesture_Counter = 0;

// Variables to store the value coming from the sensor
int sensorValue0 = 0;
int sensorValue1 = 0;


// Variable to store digital output of PIR module
bool PIR_state = "LOW";

// Variables for voltage conversion
float AnalogVolt6_0 = 0;
float AnalogVolt6_1 = 0;
float AnalogVolt_ave = 0;

// Calibration Variables
float CalFact = 0;
float CalFactAvg = 0;
float MultFactArray3 = 0; 
float MultFactArray6 = 0; 
float MultFactArray7 = 0; 
float MultFactArray10 = 0; 
float MultFactArray11 = 0; 
float MultFactArray15 = 0; 

float AnalogVolt_thres_fullOcclu = 0;
float AnalogVolt_thres_PartialOcclu = 0;
float Array[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


bool initial_icon_write_flag_set = LOW;
bool Calendar_occluded_flag;
bool Weather_occluded_flag;
bool Recipe_occluded_flag;

int x = 0;


// Create images into C data structures
// Use ImageDog.java - A command line image converter to create C data structures that can be efficiently processed by DOGS102x-6 displays.


// This image has been created by ImageDog using 'recipes.PNG'
const uint8_t recipes[] =
{
    0x6c,    // Image width in pixels
    0x0e,    // Image height in rows (1 row = 8 pixels)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x7f,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7f, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0x3f, 0x0f, 0x03,
    0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfc, 0xff, 0xff, 0x3f, 0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xc1, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf8, 0xfe, 0xff, 0x7f, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x78, 0xf8, 0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xf8,
    0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x8f, 0xef, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xbf, 0x8f, 0x83, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f,
    0x06, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0xfe, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x0f, 0x0f, 0x1f, 0x3f, 0x3e, 0x3e, 0x7c, 0x7c, 0x7c, 0x7c, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x3e, 0x3e, 0x3e, 0x1f, 0x1f, 0x0f,
    0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x03, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff,
    0xff, 0xff, 0xff, 0xf3, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfc, 0xff, 0xff, 0x3f, 0x0f, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x83, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x03, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xe0,
    0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0,
    0xe7, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xff, 0xff,
    0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0,
    0xf8, 0xfe, 0xff, 0x7f, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x03, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x7f, 0xff, 0xff, 0xfc, 0xf0,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xf0, 0xfc, 0xfe, 0xff,
    0x3f, 0x1f, 0x0f, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
    0xf0, 0xfc, 0xff, 0xff, 0x3f, 0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc3,
    0xff, 0xff, 0xff, 0xff, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x03, 0x0f, 0x1f, 0x7f, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xf8,
    0xfc, 0xfc, 0x7e, 0x3f, 0x1f, 0x0f, 0x0f, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80,
    0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0x3f, 0x7e, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0x7c, 0x7c, 0x7c, 0x3e, 0x3e, 0x3e, 0x1f,
    0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3e, 0x3e, 0x3e, 0x7c, 0x7c, 0x7c, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0,
    0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x60, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// This image has been created by ImageDog using 'weather.PNG'
const uint8_t weather[] =

{
    0x6c,    // Image width in pixels
    0x0e,    // Image height in rows (1 row = 8 pixels)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x07, 0x0f, 0x1f, 0x3f, 0x1f,
    0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f,
    0x1f, 0x0f, 0x07, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f,
    0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xe0, 0xf0, 0xf9, 0xff, 0xff, 0xff,
    0xff, 0x7f, 0x7f, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc,
    0xfe, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf0, 0xe0, 0xc0, 0x81, 0x07, 0x0f,
    0x3f, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x3f,
    0x1f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1,
    0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xe0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
    0xe0, 0xe0, 0xe0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x01, 0x03, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xf8, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f,
    0x7f, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f,
    0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xf0, 0xe0, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xc0, 0xf0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x07, 0x07, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x7f,
    0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// This image has been created by ImageDog using 'calendar.PNG'
const uint8_t calendar[] =

{
    0x6c,    // Image width in pixels
    0x0e,    // Image height in rows (1 row = 8 pixels)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f,
    0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
    0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x03, 0x01, 0x00, 0x80, 0xe0, 0xf8, 0xf8, 0xfc,
    0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 0x01, 0x03, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x07, 0x01,
    0x00, 0x80, 0xe0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0,
    0x00, 0x00, 0x01, 0x03, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f,
    0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
    0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
    0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
    0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc,
    0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc,
    0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc,
    0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
};

// This image has been created by ImageDog using 'Sun.PNG'
const uint8_t Sun[] =
{
    0x3c,    // Image width in pixels
    0x08,    // Image height in rows (1 row = 8 pixels)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf8, 0xfc, 0x7e, 0x3e, 0x1e, 0x0e, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0xc7, 0xe7, 0xe7, 0xc7, 0x07, 0x07, 0x07, 0x07,
    0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1e, 0x3e, 0x7e, 0xfc, 0xf8, 0x70, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x3f, 0x7f, 0xff, 0xfc, 0xf8, 0xf0, 0xe0,
    0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc,
    0xff, 0x7f, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x38,
    0x38, 0x00, 0x3c, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff,
    0xff, 0x38, 0x00, 0x38, 0x38, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x38, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0xe0, 0xf0, 0xfc, 0xfe, 0x7e, 0x3f, 0x1f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x7e, 0xfe, 0xfc, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x7e, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xcf, 0xef, 0xef, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0,
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xfc, 0x7e, 0x3e, 0x1c, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// This image has been created by ImageDog using 'Cloud.PNG'
const uint8_t Cloud[] =
{
    0x3c,    // Image width in pixels
    0x08,    // Image height in rows (1 row = 8 pixels)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x1f,
    0x3e, 0x3e, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x3e, 0x3e, 0x1f, 0x1f, 0x0f, 0x07, 0x03,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0f, 0x1f, 0x3f, 0x3e, 0x7c, 0x7c, 0xf8,
    0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xff, 0x7f, 0x1f, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x07, 0x7f, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0x03, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0f, 0x1f, 0x1f, 0x3e, 0x7e, 0xfc, 0xfc, 0xf8,
    0xf8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0x7f, 0x1f, 0x0f, 0x03, 0x00,
    0x0f, 0x7f, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x7f,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x0f, 0xff, 0xff, 0xfe, 0xe0, 0x00, 0x80, 0xe0, 0xf0, 0xf8, 0xfc, 0x7e, 0x3f,
    0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3e, 0x7e, 0xfc, 0xf8, 0xf0,
    0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// This image has been created by ImageDog using 'Rain.PNG'
const uint8_t Rain[] =
{
    0x3c,    // Image width in pixels
    0x08,    // Image height in rows (1 row = 8 pixels)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03,
    0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x0f, 0x1f, 0x3f, 0x7c, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80,
    0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0x7c, 0x3f, 0x1f,
    0x0f, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xff, 0xff,
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xf0, 0xfc, 0xfe, 0x3f, 0x0f, 0x0f, 0x07, 0x07, 0x03,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x7f, 0xff, 0xff, 0xf0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xf0, 0xff, 0xff, 0x7f, 0x0f,
    0xc0, 0xf8, 0xfc, 0xfe, 0x3f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x3f, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7, 0xcf, 0xcf, 0xc7, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7, 0xcf, 0xcf, 0xc7, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7, 0xcf, 0xcf, 0xc7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe,
    0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
    0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


//++++++++++Debug++++++++++
boolean LEDstate = LOW;

// Shift Register board
int SCLR_bar_pin = P2_4;
int SCLK_pin = P1_5;
int RCLK_pin = P1_4;
int OE_bar_pin = P1_3;
int SI_pin = P8_1;

int SI_array[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
//We're only using the first 16 bits of the 32-bit shift register
int SI_array_a[16] ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}; //One display enabled for writing
int SI_array_b[16] ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}; //Next display enabled for writing
int SI_array_c[16] ={0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}; 
int SI_array_d[16] ={0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0}; 
int SI_array_e[16] ={0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0}; 
int SI_array_f[16] ={0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0}; 
int SI_array_g[16] ={0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0}; 
int SI_array_h[16] ={0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0}; 
int SI_array_i[16] ={0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0}; 
int SI_array_j[16] ={0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}; 
int SI_array_k[16] ={0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0}; 
int SI_array_l[16] ={0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}; 
int SI_array_m[16] ={0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0}; 
int SI_array_n[16] ={0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
int SI_array_o[16] ={0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
int SI_array_p[16] ={1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
int SI_array_q[16] ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //No displays enabled for writing
int SI_array_r[16] ={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}; //All displays enabled for writing

//int CalFact;
//int CalFactAvg;
//int CalFactorArray6; 
//int CalFactorArray7; 
//int CalFactorArray3; 
//int CalFactorArray15; 
//int CalFactorArray10; 
//int CalFactorArray11; 

int SI_val = 0;
int c = 0;
int n = 0;
int i = 0;
int choose_switch_case;
void setup() {
  Serial.print("Setup");
  // Gesture detector and energy harvester setup
  analogReference(INTERNAL2V5);
  Serial.begin(9600);

  //Gesture detector/energy harvester board setup
  pinMode(AddressPin0, OUTPUT);
  pinMode(AddressPin1, OUTPUT);
  pinMode(AddressPin2, OUTPUT);
  pinMode(Energy_Harvest, OUTPUT);
  pinMode(P6_0, INPUT_PULLDOWN);
  pinMode(P6_1, INPUT_PULLDOWN);
  pinMode(PIR_pin, INPUT);
  // Make sure GREEN_LED is defined as output and driven low. RED_LED jumper should be removed.
  pinMode(GREEN_LED, OUTPUT);
  digitalWrite(GREEN_LED, LOW);
  
  // PIR digital output to P2_5
  //attachInterrupt(digitalPinToInterrupt(PIR_pin), toggle1, RISING); // remove PRI

  // Shift Register board setup
  pinMode(SCLK_pin, OUTPUT);
  pinMode(OE_bar_pin, OUTPUT);
  pinMode(SCLR_bar_pin, OUTPUT);
  pinMode(RCLK_pin, OUTPUT);
  pinMode(SI_pin, OUTPUT);


  // Display
  myScreen.begin();
  myScreen.clearBuffer();

  //P1_0; P1_1; P1_2*; P1_3*; P1_4*; P1_5*; P1_6*; P1_7
  //P2_0; P2_1; P2_2; P2_3; P2_4*; P2_5*; P2_6; P2_7
  //P3_0*; P3_1; P3_2*; P3_3; P3_4; P3_5; P3_6; P3_7*
  //P4_0*; P4_1; P4_2; P4_3; P4_4; P4_5; P4_6; P4_7
  //P5_0; P5_1; P5_2; P5_3; P5_4; P5_5; P5_6; P5_7
  //P6_0*; P6_1*; P6_2; P6_3; P6_4; P6_5; P6_6*; P6_7
  //P7_0; P7_1; P7_2; P7_3; P7_4; P7_5; P7_6; P7_7
  //P8_0; P8_1*; P8_2*

  //*used GPIOs
  
  // Remaining I/Os defined as outputs to achieve typical current consumption <2 uA
  //Otherwise, current consumption increases to 400-600 uA
  
  /*
  PnDIR |= BITn          PnDIR |= ~BITn           PnDIR &= BITn          PnDIR &= ~BITn
  Unmasked set to 1      Unmasked unchanged       Unmasked unchanged     Unmasked set to 0
  Masked unchanged       Masked set to 1          Masked set to 0        Masked unchanged
  */


  
  // BITn = 1 The port is switched to output direction

  P1DIR |= BIT0+BIT1+BIT7;
  P1OUT &= (~BIT0)+(~BIT1)+(~BIT7);
  P2DIR |= BIT0+BIT1+BIT2+BIT3+BIT6+BIT7;
  P2OUT &= (~BIT0)+(~BIT1)+(~BIT2)+(~BIT3)+(~BIT6)+(~BIT7);
  P3DIR |= BIT1+BIT3+BIT4+BIT5+BIT6;
  P3OUT &= (~BIT1)+(~BIT3)+(~BIT4)+(~BIT5)+(~BIT6);
  P4DIR |= BIT1+BIT2+BIT3+BIT4+BIT5+BIT6+BIT7;
  P4OUT &= (~BIT1)+(~BIT2)+(~BIT3)+(~BIT4)+(~BIT5)+(~BIT6)+(~BIT7);
  P5DIR |= BIT0+BIT1+BIT2+BIT3+BIT4+BIT5+BIT6+BIT7;
  P5OUT &= (~BIT0)+(~BIT1)+(~BIT2)+(~BIT3)+(~BIT4)+(~BIT5)+(~BIT6)+(~BIT7);
  P6DIR |= BIT2+BIT3+BIT4+BIT5+BIT7;
  P6OUT &= (~BIT2)+(~BIT3)+(~BIT4)+(~BIT5)+(~BIT7);
  P7DIR |= BIT0+BIT1+BIT2+BIT3+BIT4+BIT5+BIT6+BIT7;
  P7OUT &= (~BIT0)+(~BIT1)+(~BIT2)+(~BIT3)+(~BIT4)+(~BIT5)+(~BIT6)+(~BIT7);
  P8DIR |= BIT0;
  P8OUT &= (~BIT0);
}

void loop() {
    if (Gesture_Counter < 10) {
      digitalWrite(Energy_Harvest, LOW);
      Read_Analog();
      Gesture_Counter++;
    } else {
      digitalWrite(Energy_Harvest, HIGH);
      Gesture_Counter = 0;
    //  suspend();
    sleep(100);
    }    
}


//==================ISR==================
//void toggle1() {
//  wakeup();
//  Gesture_Counter = 0;
//}

//==================READ ANALOG==================
float Read_Analog() {

// MUX addressing
  if (AddressCounter == 0) {
    digitalWrite(AddressPin0, LOW);
    digitalWrite(AddressPin1, LOW);
    digitalWrite(AddressPin2, LOW);
    sleep(10);
    //Read the value from the sensor:
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    //Convert digital reading to voltage, multiplied by 2, because of voltage divider
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1;
    //Fill first two elements of 16 element array
    Array[0] = {AnalogVolt6_0};
    Array[1] = {AnalogVolt6_1};

  } else if (AddressCounter == 1) {
    digitalWrite(AddressPin0, HIGH);
    digitalWrite(AddressPin1, LOW);
    digitalWrite(AddressPin2, LOW);
    sleep(10);
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1 * 12.28884;
    Array[2] = {AnalogVolt6_0};
    Array[3] = {AnalogVolt6_1};
    
    Serial.print("Array[3]  ");
    Serial.println(Array[3], 5);

  } else if (AddressCounter == 2) {
    digitalWrite(AddressPin0, LOW);
    digitalWrite(AddressPin1, HIGH);
    digitalWrite(AddressPin2, LOW);
    sleep(10);
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1 * 0.87829;
    Array[4] = {AnalogVolt6_0};
    Array[5] = {AnalogVolt6_1};

  } else if (AddressCounter == 3) {
    digitalWrite(AddressPin0, HIGH);
    digitalWrite(AddressPin1, HIGH);
    digitalWrite(AddressPin2, LOW);
    sleep(10);
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0 * 0.21868;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1 * 12.28884;
    Array[6] = {AnalogVolt6_0};
    Array[7] = {AnalogVolt6_1};

    Serial.print("Array[6]  ");
    Serial.println(Array[6], 5);
//    
    Serial.print("Array[7]  ");
    Serial.println(Array[7], 5);

  } else if (AddressCounter == 4) {
    digitalWrite(AddressPin0, LOW);
    digitalWrite(AddressPin1, LOW);
    digitalWrite(AddressPin2, HIGH);
    sleep(10);
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1;
    Array[8] = {AnalogVolt6_0};
    Array[9] = {AnalogVolt6_1};

  } else if (AddressCounter == 5) {
    digitalWrite(AddressPin0, HIGH);
    digitalWrite(AddressPin1, LOW);
    digitalWrite(AddressPin2, HIGH);
    sleep(10);
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0 * 1.11717;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1 * 10.53329;
    Array[10] = {AnalogVolt6_0};
    Array[11] = {AnalogVolt6_1};
//    Serial.print("Array[10]  ");
//    Serial.println(Array[10], 5);
//
//    Serial.print("Array[11]  ");
//    Serial.println(Array[11], 5);
    
  } else if (AddressCounter == 6) {
    digitalWrite(AddressPin0, LOW);
    digitalWrite(AddressPin1, HIGH);
    digitalWrite(AddressPin2, HIGH);
    sleep(10);
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1;
    Array[12] = {AnalogVolt6_0};
    Array[13] = {AnalogVolt6_1};
    
  } else if (AddressCounter == 7) {
    digitalWrite(AddressPin0, HIGH);
    digitalWrite(AddressPin1, HIGH);
    digitalWrite(AddressPin2, HIGH);
    sleep(10);
    sensorValue0 = analogRead(sensorPin0);
    sensorValue1 = analogRead(sensorPin1);
    AnalogVolt6_0 = (2.5 / 4096) * sensorValue0;
    AnalogVolt6_1 = (2.5 / 4096) * sensorValue1 * 7.37330;
    Array[14] = {AnalogVolt6_0};
    Array[15] = {AnalogVolt6_1};
    Serial.print("Array[15]  ");
    Serial.println(Array[15], 5);


    
  } else {
    // Do nothing
  }

  // Increment AddressCounter
  AddressCounter++;



  // Reset AddressCounter
  if (AddressCounter > 7) {
    AddressCounter = 0;


    
    //Serial.print("initial_icon_write_flag_set: ");
    //Serial.println(initial_icon_write_flag_set);
    
    if(initial_icon_write_flag_set == LOW){
      //Serial.print("initial_icon_write_flag_set: ");
      //Serial.println(initial_icon_write_flag_set);
        // Write image icons to bottom row of display array - only do this once on start up
      Write_icons_display();
    }

//Move icons if displays are fully obscured
    if(Array[3] && Array[15] < AnalogVolt_thres_fullOcclu){
     // Reconfi_icons_display();
    }

    if(Array[3] && Array[15] > AnalogVolt_thres_fullOcclu){
      initial_icon_write_flag_set = LOW;
     
    }



      // Average voltage across all PV tiles
    Calc_average_background();
    sleep(10);


//*******************************************************************************************************************Solve occlude 
conflict***************************************************************************************************
      //Check for occluded calendar icon...

if (Array[3] && Array[15] > AnalogVolt_thres_fullOcclu){

    if(Weather_occluded_flag == LOW && Recipe_occluded_flag == LOW){
      Serial.println("Calendar occluded");
      Occlude_calendar();
    }
    
    if(Calendar_occluded_flag == LOW && Recipe_occluded_flag == LOW){
      Occlude_weather();
      Serial.println("Weather occluded");
    }
    
    if(Calendar_occluded_flag == LOW && Weather_occluded_flag == LOW){
      Occlude_recipe();
      Serial.println("Recipe occluded");

    }else{
        //Calendar_occluded_flag = LOW;
        //Weather_occluded_flag = LOW;
        //Recipe_occluded_flag = LOW;
    }
  }
}


}// end of Analogread function


//void TimeIntrCalibration(void * param ){
//  
//   int delay = (int)param;
//    while(1)
//    {
//        Calibration();//periodic function
//        sleep(delay);//sleep for 1 minute
//    }
//  }

//*******************************************************************************************************************Tile 
Calibration***************************************************************************************************
      //Check for calibration 

void Calibration(){
sleep(1000);//sleep for 1 minute
CalFact =  Array[6] + Array[7] + Array[3] + Array[15] + Array[10] + Array[11];
    Serial.print("CalFact  ");
    Serial.println(CalFact, 5);
CalFactAvg = CalFact/6;
    Serial.print("CalFactAvg  ");
    Serial.println(CalFactAvg, 5);

//update array and recalibrate it 

MultFactArray3 = CalFactAvg/Array[3];
Array[3] = Array[3] * MultFactArray3;
Serial.print("Array[3]Update  ");
Serial.println(Array[3], 5);

MultFactArray6 = CalFactAvg/Array[6];
Array[6] = Array[6] * MultFactArray6;
Serial.print("Array[6]Update  ");
Serial.println(Array[6], 5);

MultFactArray7 = CalFactAvg/Array[7];
Array[7] = Array[7] * MultFactArray7;
Serial.print("Array[7]Update  ");
Serial.println(Array[7], 5);

MultFactArray10 = CalFactAvg/Array[10];
Array[10] = Array[10] * MultFactArray10;
Serial.print("Array[10]Update  ");
Serial.println(Array[10], 5);

MultFactArray11 = CalFactAvg/Array[11];
Array[11] = Array[11] * MultFactArray11;
Serial.print("Array[11]Update  ");
Serial.println(Array[11], 5);

MultFactArray15 = CalFactAvg/Array[15];
Array[15] = Array[15] * MultFactArray15;
Serial.print("Array[15]Update  ");
Serial.println(Array[15], 5);
}
//End calibration 


//==================CALC AVERAGE BACKGROUND==================

void Calc_average_background(){
    AnalogVolt_ave = 0; //Reset to zero
      for(i=0; i<16; i++){
      AnalogVolt_ave = AnalogVolt_ave + Array[i]; // Sum voltages
   
       
     Serial.println(AnalogVolt_ave);
     Serial.print("AnalogVolt_ave  ");
     Serial.println(AnalogVolt_ave, 5);
  


//*************************************************************************Thresholds may need to be dynamic, i.e. adjusted according to lighting 
conditions!!********************************************
  //Calculate threshold 40% of average voltage for full occlusion
  AnalogVolt_thres_fullOcclu = AnalogVolt_ave * 0.20;

  //Calculate threshold 50% of average voltage for partial occlusion
  AnalogVolt_thres_PartialOcclu = AnalogVolt_ave * 0.70; //this need to be change in function of Occlude_calendar, weather, recipes  

}


//==================WRITE TO DISPLAY==================

void Write_icons_display(){

        //Clear_displays();
  
        Set_SR_array(7); //Write calendar image to display 7
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.drawImage(calendar,10,5); 
        myScreen.flush();
        myScreen.clearBuffer();
        sleep(10);
        
        Set_SR_array(3); //Write weather image to display 3
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.drawImage(weather,10,5); 
        myScreen.flush();

        Set_SR_array(15); //Write recipes image to display 15
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.drawImage(recipes,10,5); 
        myScreen.flush(); 

        //myScreen.clearBuffer();
        //Set_SR_array(7); //Write text to display 7
        //Clear_text_displays();

        initial_icon_write_flag_set = HIGH; 
        Serial.print("initial_icon_write_flag_set: ");
        Serial.println(initial_icon_write_flag_set);
        // Icons written to display. 
        // With initial_icon_write_flag_set 'HIGH', the only way to write icons to display again is by pressing reset button on Launchpad    
}


void Reconfi_icons_display(){
        Set_SR_array(7); //Write recipes to display 7
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.drawImage(recipes,10,5);
        myScreen.flush();
        myScreen.clearBuffer();
        sleep(10);

 
        Set_SR_array(6); //Write weather clock to display 6
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.drawImage(weather,10,5);
        myScreen.flush();
        myScreen.clearBuffer();
        sleep(10);

        Set_SR_array(5); //Write calendar clock to display 5
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.drawImage(calendar,10,5);
        myScreen.flush();
        myScreen.clearBuffer();
        sleep(10);

        myScreen.clearBuffer();
        Set_SR_array(15); //Write text to display 15
        Clear_text_displays();
        
        myScreen.clearBuffer();
        Set_SR_array(3); //Write text to display 3
        Clear_text_displays();


//        myScreen.clearBuffer();
//        Set_SR_array(7); //Write text to display 7
//        Clear_text_displays();
}




void Write_calendar_display(){
/*Text written to six displays above bottom display, which shows calendar schedule */
        myScreen.clearBuffer();
       // delay(1000);
        Set_SR_array(5); //Write text to display 5
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "9:00am\n10:45am");
        myScreen.flush();


        myScreen.clearBuffer();
        Set_SR_array(6); //Write text to display 6
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "1:00pm\n3:30pm");
        myScreen.flush(); 

        myScreen.clearBuffer();
        Set_SR_array(1); //Write text to display 1
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Dentist\nTeam");
        myScreen.flush();
        
        myScreen.clearBuffer();
        Set_SR_array(2); //Write text to display 2
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Coffee\nSchool");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(13); //Write text to display 13
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Check-up\nPV");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(14); //Write text to display 14
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(30, 50, "Sam\nJo");
        myScreen.flush();   

       //delay(10000);
}

void Write_calendar_display_level2(){
/*Text written to six displays above bottom display, which shows which shows calendar schedule at level2*/
        myScreen.clearBuffer();
       // delay(1000);
        Set_SR_array(5); //Write text to display 5
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "1:00pm\n3:30pm");
        myScreen.flush();
        
        myScreen.clearBuffer();
        Set_SR_array(6); //Write text to display 6
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "5:00pm\n9:00pm");
        myScreen.flush(); 

        myScreen.clearBuffer();
        Set_SR_array(1); //Write text to display 1
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Coffee\nSchool");
        myScreen.flush();
        
        myScreen.clearBuffer();
        Set_SR_array(2); //Write text to display 2
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Pick-up\nflight");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(13); //Write text to display 13
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Jo\nSam");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(14); //Write text to display 14
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(30, 50, "hire car\nLHR");
        myScreen.flush();   
}

void Write_weather_display(){
/*Text written to ten displays above bottom display, which shows weather forecast*/
        myScreen.clearBuffer();
        Set_SR_array(5); //Write text to display 5
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "7:00pm");
        myScreen.drawImage(Rain,40,50);
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(6); //Write text to display 6
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "5:00pm");
         myScreen.drawImage(Rain,40,50);
        myScreen.flush(); 

        myScreen.clearBuffer();
        Set_SR_array(1); //Write text to display 1
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "Now\n");
        myScreen.drawImage(Sun,40,50);
        myScreen.flush();
        
        myScreen.clearBuffer();
        Set_SR_array(2); //Write text to display 2
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Light\nBreeze");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(13); //Write text to display 13
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 50, "15 deg C");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(14); //Write text to display 14
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(30, 50, "80%\nHumidity");
        myScreen.flush();  

        myScreen.clearBuffer();
        Set_SR_array(9); //Write text to display 9
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "09:00 am");
        myScreen.drawImage(Sun,40,50);
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(10); //Write text to display 10
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "11:00 am");
        myScreen.drawImage(Sun,40,50);
        myScreen.flush();  

        myScreen.clearBuffer();
        Set_SR_array(0); //Write text to display 0
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "01:00 pm");
        myScreen.drawImage(Cloud,40,50);
        myScreen.flush(); 

        myScreen.clearBuffer();
        Set_SR_array(12); //Write text to display 12
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "03:00 pm");
        myScreen.drawImage(Cloud,40,50);
        myScreen.flush(); 

}

void Write_weather_display_level2(){
/*Text written to ten displays above bottom display, which shows weather forecast at level 2 */

        myScreen.clearBuffer();
        Set_SR_array(1); //Write text to display 1
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 30, "Now\n");
        myScreen.drawImage(Sun,40,50);
        myScreen.flush();
        
        myScreen.clearBuffer();
        Set_SR_array(2); //Write text to display 2
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Gentle\nBreeze");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(13); //Write text to display 13
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 50, "18 deg C");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(14); //Write text to display 14
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(30, 50, "70%\nHumidity");
        myScreen.flush();  

}

void Write_recipe_display(){
/*Text written to four displays above bottom display, which shows recipe of the day*/


        myScreen.clearBuffer();
        Set_SR_array(1); //Write text to display 1
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, "Recipe of\n.......\n.......\n");
        myScreen.flush();
        
        myScreen.clearBuffer();
        Set_SR_array(2); //Write text to display 2
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(20, 50, ".....");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(13); //Write text to display 13
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(10, 50, "the day!\n.......\n.......\n");
        myScreen.flush();

        myScreen.clearBuffer();
        Set_SR_array(14); //Write text to display 14
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.setFont(1);
        myScreen.text(30, 50, "....");
        myScreen.flush();   
}

// clear text displays 
void Clear_text_displays(){
        Fill_register();
        sleep(10);
        Transfer_to_storage_reg();
        sleep(10);
        Enable_parallel_ports();
        myScreen.clear();
        myScreen.flush();
}

// Occlusion calendar 
void Occlude_calendar(){
    if(Array[7] < AnalogVolt_thres_PartialOcclu && Array[7] > AnalogVolt_thres_fullOcclu){
               Set_SR_array(7); //Write text to display 7
               Clear_text_displays();
               
        do {
               Write_calendar_display(); // Write menu text to displays
        }
               while (((Array[8]+Array[9]+Array[10]+Array[11])/4) < AnalogVolt_thres_PartialOcclu);
                      Calendar_occluded_flag = HIGH;
    }

         else if (((Array[8]+Array[9]+Array[10]+Array[11])/4) < AnalogVolt_thres_PartialOcclu){

          do {
                Write_calendar_display_level2();
          }
           while (((Array[4]+Array[5]+Array[6]+Array[7])/4) < AnalogVolt_thres_PartialOcclu);
                                        
    }
          else if (((Array[4]+Array[5]+Array[6]+Array[7])/4) < AnalogVolt_thres_PartialOcclu) {
              Calendar_occluded_flag = LOW;
              myScreen.clearBuffer();
              Clear_text_displays();
          }
}

// Occlusion weather 
void Occlude_weather(){
  if(Array[3] < AnalogVolt_thres_PartialOcclu && Array[3] > AnalogVolt_thres_fullOcclu){
         Set_SR_array(3); //Write text to display 3
         Clear_text_displays();

 do {
               Write_weather_display(); // Write menu text to displays
        }
               while (Array[10] < AnalogVolt_thres_PartialOcclu);
                      Weather_occluded_flag = HIGH;       
  }

 else if (Array[10] < AnalogVolt_thres_PartialOcclu){

          do {
                Write_weather_display_level2();
          } 
           while (((Array[4]+Array[5]+Array[6]+Array[7])/4) < AnalogVolt_thres_PartialOcclu);                               
    }
  
  else if (((Array[4]+Array[5]+Array[6]+Array[7])/4) < AnalogVolt_thres_PartialOcclu) {  

        Weather_occluded_flag = LOW;   
        myScreen.clearBuffer();
        Set_SR_array(5); //Write text to display 5
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(6); //Write text to display 6
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(1); //Write text to display 1
        Clear_text_displays();
        
        myScreen.clearBuffer();
        Set_SR_array(2); //Write text to display 2
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(13); //Write text to display 1
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(14); //Write text to display 14
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(9); //Write text to display 9
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(10); //Write text to display 10
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(0); //Write text to display 0
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(12); //Write text to display 12
        Clear_text_displays();
  }
}

// Occlusion recipe 
 void Occlude_recipe(){
    if(Array[15] < AnalogVolt_thres_PartialOcclu && Array[15] > AnalogVolt_thres_fullOcclu){
               Set_SR_array(15); //Write text to display 15
               Clear_text_displays();

 do {
                Write_recipe_display(); // Write menu text to displays
        }
               while (((Array[4]+Array[5]+Array[6]+Array[7])/4) < AnalogVolt_thres_PartialOcclu);
                       Recipe_occluded_flag = HIGH;
    }
  
    else if (((Array[4]+Array[5]+Array[6]+Array[7])/4) < AnalogVolt_thres_PartialOcclu) { 
    
        Recipe_occluded_flag = LOW;

        myScreen.clearBuffer();
        Set_SR_array(1); //Write text to display 1
        Clear_text_displays();
        
        myScreen.clearBuffer();
        Set_SR_array(2); //Write text to display 2
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(13); //Write text to display 13
        Clear_text_displays();

        myScreen.clearBuffer();
        Set_SR_array(14); //Write text to display 14
        Clear_text_displays();
  }
}



// Occlusion/gesture detection based on movement and time
//void detect_movement(){
//  //Either PV tile peoducing less than threshold voltage?
//  if (Array[0] < AnalogVolt_thres_PartialOcclu || Array[12] < AnalogVolt_thres_PartialOcclu){
//    Variation_detected = true; 
//    //Serial.println(" MOVEMENT! ");
//  }else{
//    Variation_detected = false;
//    Serial.print(".");
//  }
//  
//  if(Variation_detected == true){
//    //Serial.println("Movement_detected!");
//    time_delay();
//  }else{
//    //Do nothing
//  }
//}
//
//
//void time_delay(){
//    
//  if (Array[0] < AnalogVolt_thres_movement && Array[12] > AnalogVolt_thres_movement){
//    TimePV1_low = millis();
//    Serial.println("PV1 low: ");
//    Serial.println(TimePV1_low);
//  }else if (Array[0] > AnalogVolt_thres_movement && Array[12] < AnalogVolt_thres_movement){
//    TimePV2_low = millis();
//    Serial.print("PV2 low: ");
//    Serial.println(TimePV2_low);
//  }else if (Array[0] < AnalogVolt_thres_movement && Array[12] < AnalogVolt_thres_movement){
//    // Do nothing
//  } else{
//    //Reset
//    TimePV1_low = 0;
//    TimePV1_low = 0;
//  }
//
//  Time_difference = TimePV1_low - TimePV2_low;
//
//  if(Time_difference < 2000 && Time_difference > -2000){
//    //Serial.println(TimePV1_low);
//    //Serial.println(TimePV2_low);
//    Serial.print(" ");
//    Serial.println(Time_difference);
//    Serial.print(" ");
//    
//   if(Time_difference > 0){
//        //Serial.println("Left");
//   }
//   else{
//        //Serial.println("Right");
//   }
//  }
//  else{
//    
//  }
//
//}



//==================SET SR ARRAY==================
void Set_SR_array(int i){
  // Display Array[i] value on corresponding display
  // Array split into two: first 16 bits for P3 (SCS); second 16 bits for P5 (LCD_VDD)
  // Keep all displays powered on
  
  for(n=0; n<16; n++){
    if(i == 0){
         SI_array[n] = SI_array_a[n];  
    } else if(i == 1){
         SI_array[n] = SI_array_b[n];
    } else if(i == 2){
         SI_array[n] = SI_array_c[n];
    } else if(i == 3){
         SI_array[n] = SI_array_d[n];
    } else if(i == 4){
         SI_array[n] = SI_array_e[n]; 
    } else if(i == 5){
         SI_array[n] = SI_array_f[n];
    } else if(i == 6){
         SI_array[n] = SI_array_g[n];
    } else if(i == 7){
         SI_array[n] = SI_array_h[n]; 
    } else if(i == 8){
         SI_array[n] = SI_array_i[n]; 
    } else if(i == 9){
         SI_array[n] = SI_array_j[n]; 
    } else if(i == 10){
         SI_array[n] = SI_array_k[n];   
    } else if(i == 11){
         SI_array[n] = SI_array_l[n];    
    } else if(i == 12){
         SI_array[n] = SI_array_m[n]; 
    } else if(i == 13){
         SI_array[n] = SI_array_n[n]; 
    } else if(i == 14){
         SI_array[n] = SI_array_o[n]; 
    } else if(i == 15){
        SI_array[n] = SI_array_p[n];  
    } else if(i == 16){
        SI_array[n] = SI_array_r[n];    //Select all 16 displays for writing     
    } else{
        SI_array[n] = SI_array_q[n]; 
    }
  }  
}

//==================SHIFT REGISTERS==================
void Fill_register(){
  digitalWrite(OE_bar_pin, HIGH);
  digitalWrite(SCLR_bar_pin, HIGH);
  digitalWrite(RCLK_pin, LOW);
  
  for(c=0; c<32; c++){
    if(SI_array[c] == 1){
      digitalWrite(SI_pin, HIGH);
    }
    else{
      digitalWrite(SI_pin, LOW);
    }
    
    digitalWrite(SCLK_pin, LOW);
    digitalWrite(SCLK_pin, HIGH);
  }
}

void Transfer_to_storage_reg(){
  digitalWrite(OE_bar_pin, HIGH);
  digitalWrite(SCLR_bar_pin, HIGH);
  digitalWrite(RCLK_pin, LOW);
  digitalWrite(RCLK_pin, HIGH);
  digitalWrite(RCLK_pin, LOW);
}

void Clear_shift_reg(){
  digitalWrite(OE_bar_pin, HIGH);
  digitalWrite(SCLR_bar_pin, HIGH);
  digitalWrite(RCLK_pin, LOW);
  digitalWrite(RCLK_pin, HIGH);
  digitalWrite(SCLK_pin, LOW);
}

void Enable_parallel_ports(){
  digitalWrite(OE_bar_pin, LOW);
}

void Disable_parallel_ports(){
  digitalWrite(OE_bar_pin, HIGH);
}